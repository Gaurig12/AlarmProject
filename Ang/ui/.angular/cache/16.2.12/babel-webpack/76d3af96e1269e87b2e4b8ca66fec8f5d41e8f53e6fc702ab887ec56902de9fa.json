{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n//   constructor(private AlarmService: AlarmService) {}\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component } from '@angular/core';\nlet AlarmComponent = class AlarmComponent {\n  constructor(AlarmService) {\n    this.AlarmService = AlarmService;\n    this.alarms = []; // Initialize with an empty array\n  }\n\n  ngOnInit() {\n    this.loadAlarms();\n  }\n  loadAlarms() {\n    this.AlarmService.getAlarms().subscribe(alarms => {\n      this.alarms = alarms;\n      console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n    }, error => {\n      console.error('Error loading alarms:', error);\n    });\n  }\n  editAlarm(alarm) {\n    // Here you can implement logic to open an edit form or dialog for the selected alarm\n    console.log('Editing alarm:', alarm);\n  }\n  deleteAlarm(id) {\n    if (confirm('Are you sure you want to delete this alarm?')) {\n      this.AlarmService.deleteAlarm(id).subscribe(() => {\n        // Remove the deleted alarm from the local array\n        this.alarms = this.alarms.filter(a => a.id !== id);\n        console.log('Alarm deleted successfully');\n      }, error => {\n        console.error('Error deleting alarm:', error);\n        // Optionally, display an error message to the user\n      });\n    }\n  }\n};\n\nAlarmComponent = __decorate([Component({\n  selector: 'app-alarms',\n  templateUrl: './alarms.component.html',\n  styleUrls: ['./alarms.component.css']\n})], AlarmComponent);\nexport { AlarmComponent };","map":{"version":3,"names":["Component","AlarmComponent","constructor","AlarmService","alarms","ngOnInit","loadAlarms","getAlarms","subscribe","console","log","error","editAlarm","alarm","deleteAlarm","id","confirm","filter","a","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\AMBUJ\\AMBUJ\\COLLEGE\\GG\\alarm-demo-main\\Ang\\ui\\src\\app\\read\\read.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { AlarmService } from '../data.service';\n// import { Alarm } from '../app.model';\n\n// @Component({\n//   selector: 'app-read',\n//   templateUrl: './read.component.html',\n//   styleUrls: ['./read.component.css']\n// })\n\n// export class ReadComponent {\n//    alarms: Alarm[] = []; // Initialize with an empty array\n//  public databaseData: any;\n\n//   constructor(private AlarmService: AlarmService) {}\n\n//   ngOnInit(): void {\n//     this.AlarmService.getData().subscribe(data => {\n//       this.databaseData = data;\n//     });\n//   }\n//  selectedItem: any;\n//   showDetails(item: any): void {\n//     this.databaseData.forEach(data => {\n//       if (data !== item) {\n//         data.showDetails = false; // Hide details of other rows\n//       }\n//     });\n//     item.showDetails = !item.showDetails; // Toggle details for the clicked row\n//     this.selectedItem = item.showDetails ? item : null;\n// }\n//  editAlarm(alarm: Alarm): void {\n//     // Here you can implement logic to open an edit form or dialog for the selected alarm\n//     console.log('Editing alarm:', alarm);\n//   }\n\n//   deleteAlarm(id: number): void {\n//     if (confirm('Are you sure you want to delete this alarm?')) {\n//       this.AlarmService.deleteAlarm(id).subscribe(() => {\n//         // Remove the deleted alarm from the local array\n//         this.alarms = this.alarms.filter(a => a.id !== id);\n//         console.log('Alarm deleted successfully');\n//       }, error => {\n//         console.error('Error deleting alarm:', error);\n//         // Optionally, display an error message to the user\n//       });\n//     }\n// }}\nimport { Component, OnInit } from '@angular/core';\nimport { Alarm } from '../app.model';\nimport { AlarmService } from '../data.service';\n\n@Component({\n  selector: 'app-alarms',\n  templateUrl: './alarms.component.html',\n  styleUrls: ['./alarms.component.css']\n})\nexport class AlarmComponent  implements OnInit {\n  alarms: Alarm[] = []; // Initialize with an empty array\n\n  constructor(private AlarmService: AlarmService) { }\n\n  ngOnInit(): void {\n    this.loadAlarms();\n  }\n\n  loadAlarms(): void {\n    this.AlarmService.getAlarms().subscribe(\n      (alarms: Alarm[]) => {\n        this.alarms = alarms;\n        console.log('Alarms:', alarms); // Add a console.log statement to check if alarms are received\n      },\n      (error) => {\n        console.error('Error loading alarms:', error);\n      }\n    );\n  }\n  editAlarm(alarm: Alarm): void {\n    // Here you can implement logic to open an edit form or dialog for the selected alarm\n    console.log('Editing alarm:', alarm);\n  }\n\n  deleteAlarm(id: number): void {\n    if (confirm('Are you sure you want to delete this alarm?')) {\n      this.AlarmService.deleteAlarm(id).subscribe(() => {\n        // Remove the deleted alarm from the local array\n        this.alarms = this.alarms.filter(a => a.id !== id);\n        console.log('Alarm deleted successfully');\n      }, error => {\n        console.error('Error deleting alarm:', error);\n        // Optionally, display an error message to the user\n      });\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAgB,eAAe;AASjD,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAGzBC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAFhC,KAAAC,MAAM,GAAY,EAAE,CAAC,CAAC;EAE4B;;EAElDC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAA,UAAUA,CAAA;IACR,IAAI,CAACH,YAAY,CAACI,SAAS,EAAE,CAACC,SAAS,CACpCJ,MAAe,IAAI;MAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpBK,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEN,MAAM,CAAC,CAAC,CAAC;IAClC,CAAC,EACAO,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CACF;EACH;EACAC,SAASA,CAACC,KAAY;IACpB;IACAJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,KAAK,CAAC;EACtC;EAEAC,WAAWA,CAACC,EAAU;IACpB,IAAIC,OAAO,CAAC,6CAA6C,CAAC,EAAE;MAC1D,IAAI,CAACb,YAAY,CAACW,WAAW,CAACC,EAAE,CAAC,CAACP,SAAS,CAAC,MAAK;QAC/C;QACA,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACA,MAAM,CAACa,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;QAClDN,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MAC3C,CAAC,EAAEC,KAAK,IAAG;QACTF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C;MACF,CAAC,CAAC;;EAEN;CACD;;AArCYV,cAAc,GAAAkB,UAAA,EAL1BnB,SAAS,CAAC;EACToB,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWrB,cAAc,CAqC1B;SArCYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}